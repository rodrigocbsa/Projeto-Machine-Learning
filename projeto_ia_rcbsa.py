# -*- coding: utf-8 -*-
"""PROJETO IA - RCBSA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jHaS3RlWGldZxWgQwknrwTmCd1ZGbRwS

**PROJETO DE MACHINE LEARNING EM SISTEMAS COMPUTACIONAIS INTELIGENTES **  
predizer a chance de um cliente abandonar o serviço


---  




*ALUNO RODRIGO COSTA BITTENCOURT SILVA ARRUDA*  
CEFET-RJ Nova Friburgo - 30/01/2025
"""

# Importando as bibliotecas necessárias
from sklearn.neighbors import KNeighborsClassifier as knnc
import numpy as np
import pandas as pd
from google.colab import drive

# Importando o dataset (dataframe) que será utilizado no modelo
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/telecom_churn_clean.csv')

# Boa prática !
print(df.head())

# Pegando as colunas que eu quero para por no treinamento. X e Y
y = df["churn"].values
X = df[["account_length", "customer_service_calls"]].values

# Criando um classificador KNN com 6 vizinhos
knn = knnc(n_neighbors=6)

# Dando um 'fit' (montando a relação) no classificador (KNN) com os meus dados selecionados
knn.fit(X,y)

# Criei um novo conjunto de dados para X
X_new = np.array([[30, 17],
                  [107, 24],
                  [213, 10]])

# Finalmente, predizer...
y_pred = knn.predict(X_new)

# Imprimindo os resultados
print("Predictions: {}".format(y_pred))





# MEDINDO A PERFORMANCE DO MODELO
from sklearn.model_selection import train_test_split

X = df.drop("churn", axis=1).values
y = df["churn"].values

# separo em dados de teste e de treino
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
knn = knnc(n_neighbors=5)

# treinameos o knn com os dados de treino
knn.fit(X_train, y_train)

# calculamos o score com o dado de teste
print(knn.score(X_test,y_test))
# (o desempenho de um modelo qualquer (%) é a divisão do número de predições corretos pelo total de observações)
